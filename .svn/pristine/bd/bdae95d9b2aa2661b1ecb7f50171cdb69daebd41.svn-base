package com.castsoftware.jenkins.CastAIPWS.util;

import hudson.EnvVars;
import hudson.model.AbstractBuild;
import hudson.model.BuildListener;

import java.io.IOException;
import java.lang.reflect.Type;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.jdom.Element;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.exception.HelperException;
import com.castsoftware.util.CastUtil;
import com.castsoftware.util.VersionInfo;
import com.castsoftware.webservice.RemoteHelper;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class Utils
{
	static public Element findElement(Element current, String elementName)
	{
		if (current.getName() == elementName) {
			return current;
		}
		List children = current.getChildren();
		Iterator iterator = children.iterator();
		while (iterator.hasNext()) {
			Element child = (Element) iterator.next();
			Element tempElement = findElement(child, elementName);
			if (tempElement != null) {
				return tempElement;
			}
		}
		// Didn't find the element anywhere.
		return null;
	}

	static public boolean canRunTask(List <Element> taskList,Class lookFor,Class base)
	{
		Boolean found = false;
		for (Element el : taskList) {
			if (el.getName().equals(base.getName())) continue;
			if (lookFor.getName().equals(el.getName())) {
				found = true;
				break;
			}
		}
		return !found;
	}

	static public boolean validateBuildVariables(AbstractBuild build, BuildListener listener)
	{
		boolean rslt = true;
		EnvVars envVars;
		try {
			envVars = build.getEnvironment(listener);
			// make sure everything is set properly
			if (envVars.get(Constants.DMT_WEB_SERVICE_ADDRESS).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.DMT_WEB_SERVICE_ADDRESS);
				rslt = false;
			}
			if (envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.CMS_WEB_SERVICE_ADDRESS);
				rslt = false;
			}
			if (envVars.get(Constants.VERSION_NAME).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.VERSION_NAME);
				rslt = false;
			}
			if (envVars.get(Constants.CONNECTION_PROFILE).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.CONNECTION_PROFILE);
				rslt = false;
			}
			// if (envVars.get(Constants.CAPTURE_DATE).isEmpty()) {
			// listener.getLogger().printf("%s is not set",
			// Constants.CAPTURE_DATE);
			// rslt = false;
			// }
			if (envVars.get(Constants.SNAPSHOT_NAME).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.SNAPSHOT_NAME);
				rslt = false;
			}
			// if (envVars.get(Constants.TODAY).isEmpty()) {
			// listener.getLogger().printf("%s is not set", Constants.TODAY);
			// rslt = false;
			// }
			if (envVars.get(Constants.WORK_FLOW).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.WORK_FLOW);
				rslt = false;
			}
		} catch (IOException | InterruptedException e) {
			listener.getLogger().println(e.getMessage());
			rslt = false;
		}
		return rslt;
	}

	static public boolean getLog(CastWebService cbws, int taskId, long startTime, BuildListener listener)
	{
		int returnCode;
		int feedbackCounter;
		int logIndex;
		String logString;
		Gson gson = new Gson();
		Type collectionType = new TypeToken<Collection<String>>()
		{
		}.getType();
		Collection<String> tmp;
		List<String> logLines;

		try {
			feedbackCounter = 0;
			logIndex = 0;
			do {
				// Get Log
				Thread.sleep(1000);
				logString = cbws.getTaskOutput(taskId, logIndex);
				tmp = gson.fromJson(logString, collectionType);
				if (tmp != null) {
					logLines = new ArrayList<String>(tmp);
					logIndex += logLines.size();
					for (String s : logLines)
						listener.getLogger().println(s);

					feedbackCounter++;
					if (feedbackCounter % 300 == 0)
						listener.getLogger().println(
								String.format(" %s...", CastUtil.formatNanoTime(System.nanoTime() - startTime)));
				}
			} while (cbws.isTaskRunning(taskId));

			// Get Log
			logString = cbws.getTaskOutput(taskId, logIndex);
			tmp = gson.fromJson(logString, collectionType);
			if (tmp != null) {
				logLines = new ArrayList<String>(tmp);
				logIndex += logLines.size();
				for (String s : logLines)
					listener.getLogger().println(s);
			}

			listener.getLogger().println(
					String.format("Duration: %s", CastUtil.formatNanoTime(System.nanoTime() - startTime)));

			returnCode = cbws.getTaskExitValue(taskId);

			listener.getLogger().println(String.format("Return Code: %d", returnCode));
		} catch (RemoteException | InterruptedException e) {
			listener.getLogger().printf("Web Service Connection Error: %s", e.getMessage());
			return false;
		}

		listener.getLogger().println(" ");

		return (returnCode == 0) ? true : false;
	}

	static public boolean validateWebServiceVersion(String webServiceAddress, BuildListener listener)
			throws HelperException
	{
		VersionInfo vi = RemoteHelper.getVersionInfo(webServiceAddress);
		if (Constants.wsVersionCompatibility.equals(vi.getVersion())) {
			return true;
		} else {
			listener.getLogger().println(
					String.format("Incompatible Web Service Version %s (Supported: %s)", vi.getVersion(),
							Constants.wsVersionCompatibility));
			return false;
		}
	}

	static public Calendar convertCastDate(String castDate) throws ParseException
	{
		Calendar cal = Calendar.getInstance();
		Date dateForToday = Constants.castDateFormat.parse(castDate);
		cal.setTime(dateForToday);
		return cal;
	}
}
