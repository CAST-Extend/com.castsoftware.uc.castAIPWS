package com.castsoftware.jenkins.CastAIPWS;

import hudson.EnvVars;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;

import java.io.IOException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;

import javax.xml.rpc.ServiceException;

import net.sf.json.JSONObject;

import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.exception.HelperException;
import com.castsoftware.jenkins.CastAIPWS.util.Constants;
import com.castsoftware.jenkins.CastAIPWS.util.Utils;
import com.castsoftware.jenkins.util.PublishEnvVarAction;

public class CastAIPDeliverBuilder extends Builder
{

	// Fields in config.jelly must match the parameter names in the
	// "DataBoundConstructor"
	@DataBoundConstructor
	public CastAIPDeliverBuilder()
	{
	}

	private Boolean checkWebServiceCompatibility(String version)
	{
		return Constants.wsVersionCompatibility.equals(version);
	}

	@SuppressWarnings("rawtypes")
	@Override
	public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException,
			InterruptedException
	{
		int taskId;
		long startTime = System.nanoTime();

		EnvVars envVars = build.getEnvironment(listener);
		int startAt;
		try {
			startAt = Integer.parseInt(envVars.get(Constants.START_AT));
		} catch (NumberFormatException e) {
			startAt = 0;
		}
		listener.getLogger().println(" ");
		if (startAt > Constants.RunDMT) {
			listener.getLogger().println(String.format("${START_AT} = %d, skipping delivery step.", startAt));
		} else {
			listener.getLogger().println("Deliver Application");

			String castDate = envVars.get(Constants.CAST_DATE);
			String webServiceAddress = envVars.get(Constants.DMT_WEB_SERVICE_ADDRESS);
			String appName = envVars.get(Constants.APPLICATION_NAME);
			String versionName = envVars.get(Constants.VERSION_NAME);
			String workFlow = envVars.get(Constants.WORK_FLOW);
			String referenceVersion = envVars.get(Constants.REFERENCE_VERSION);

			boolean failBuild = workFlow.trim().toLowerCase().equals("no");
			listener.getLogger().println("Web Service: " + webServiceAddress);

			CastWebServiceServiceLocator cbwsl = new CastWebServiceServiceLocator();
			cbwsl.setCastWebServicePortEndpointAddress(webServiceAddress);
			try {
				CastWebService cbws = cbwsl.getCastWebServicePort();

				if (!Utils.validateWebServiceVersion(webServiceAddress, listener)) {
					return false;
				}

				String appId = cbws.getApplicationUUID(appName);

				listener.getLogger().println("\nDelivery Manager Tool");
				
				Calendar cal = Utils.convertCastDate(castDate);
				startTime = System.nanoTime();

				boolean isRerun = (startAt>0);
				taskId = cbws.deliveryManagerTool(appId, appName, referenceVersion, versionName, cal);
				if (taskId < 0) {
					listener.getLogger().println(String.format("Error: %s", cbws.getErrorMessage(-taskId)));
					return false || failBuild;
				}

				if (!Utils.getLog(cbws, taskId, startTime, listener)) {
					return false;
				}

				taskId = cbws.deliveryReport(appId, appName, referenceVersion, versionName, cal);
				if (taskId == -1000000) {
					listener.getLogger().println("Delivery Report has not been run");
					return true;
				} else if (taskId < 0) {
					listener.getLogger().println(String.format("Error: %s", cbws.getErrorMessage(-taskId)));
					return false || failBuild;
				} 

				if (!Utils.getLog(cbws, taskId, startTime, listener)) {
					return false;
				}

				listener.getLogger().println(" ");
				
				if (!Utils.runJobs(build, launcher, listener, this.getClass(), Constants.RunDMT))
				{
					return false || failBuild;
				}

				
			} catch (ServiceException | RemoteException | ParseException | HelperException e) {
				listener.getLogger().println(
						String.format("%s error accured while generating the packaging and delivering the code!",
								e.getMessage()));
				return false || failBuild;
			}
		}
		return true;
	}

	/**
	 * Descriptor for {@link CastAIPBuilder}. Used as a singleton. The class is
	 * marked as public so that it can be accessed from views.
	 *
	 * <p>
	 * See
	 * <tt>src/main/resources/hudson/plugins/hello_world/CastDMTBuilder/*.jelly</tt>
	 * for the actual HTML fragment for the configuration screen.
	 */
	@Extension
	// This indicates to Jenkins that this is an implementation of an extension
	// point.
	public static final class DescriptorImpl extends BuildStepDescriptor<Builder>
	{

		private boolean useDMT;

		public DescriptorImpl()
		{
			load();
		}

		@SuppressWarnings("rawtypes")
		public boolean isApplicable(Class<? extends AbstractProject> aClass)
		{
			// Indicates that this builder can be used with all kinds of project
			// types
			return true;
		}

		/**
		 * This human readable name is used in the configuration screen.
		 */
		public String getDisplayName()
		{
			return String.format("CAST AIP %d: Deliver Application", Constants.RunDMT)  ;
		}

		@Override
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException
		{
			useDMT = formData.getBoolean("useDMT");
			save();
			return super.configure(req, formData);
		}

		public boolean getUseDMT()
		{
			return useDMT;
		}
	}
}
