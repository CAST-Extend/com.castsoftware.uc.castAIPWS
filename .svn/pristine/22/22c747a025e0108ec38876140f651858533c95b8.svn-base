package com.castsoftware.jenkins.CastAIPWS;

import hudson.EnvVars;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.ServletException;
import javax.xml.rpc.ServiceException;

import net.sf.json.JSONObject;

import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.exception.HelperException;
import com.castsoftware.jenkins.util.EnvTemplater;
import com.castsoftware.jenkins.util.PublishEnvVarAction;
import com.castsoftware.util.CastUtil;
import com.castsoftware.util.VersionInfo;
import com.castsoftware.webservice.RemoteHelper;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class CastDMTBuilder extends Builder {
	
	private final String wsVersionCompatibility = "1.1";

    private final String webServiceAddress;
    private final String appName;
    private final String versionName;
    
    private final String referenceVersion;
    private final String releaseDate;
    
    private final String workFlow;
    
    // Fields in config.jelly must match the parameter names in the "DataBoundConstructor"
    @DataBoundConstructor
    public CastDMTBuilder(
    		String webServiceAddress, 
    		String appName,
    		String versionName,
    	    String referenceVersion,
    	    String releaseDate,
    	    String workFlow) {
        this.webServiceAddress = webServiceAddress;
        this.appName = appName;
        this.versionName = versionName;
        
    	this.referenceVersion = referenceVersion;
        this.releaseDate = releaseDate;
        
        this.workFlow = workFlow;
    }
    
    private Boolean checkWebServiceCompatibility(String version)
    {
    	return wsVersionCompatibility.equals(version);
    }
    
    public String getWebServiceAddress() {
        return webServiceAddress;
    }
    
    public String getAppName() {
        return appName;
    }
 
    public String getVersionName() {
        return versionName;
    }    
    
    public String getReferenceVersion() {
        return referenceVersion;
    }
    
    public String getReleaseDate() {
        return releaseDate;
    }    
    
    private Date getReleaseDateAsDate(Date date) throws ParseException
    {  	
    	if (releaseDate.equals("[TODAY]"))
    		return date;
    	else
    		return new SimpleDateFormat("yyyy/MM/dd HH:mm:ss", Locale.ENGLISH).parse(releaseDate);
    }
    	
    public String getVersionNameWithTag(Date date, EnvVars envVars)
    {
    	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
    	String s = versionName.replace("[TODAY]", dateFormat.format(date));
		EnvTemplater jEnv=new EnvTemplater(envVars);
		s = jEnv.templateString(s);
		
/**		
    	Pattern p = Pattern.compile("\\[([A-za-z0-9_]+)\\]");
		Matcher m = p.matcher(s);
    	
		while (m.find()) 
		{
			value = envVars.get(m.group(1));
			if (value != null)
				s = s.replace(m.group(), value);
		}	
**/			
    	return s;
    } 
    
	public String getWorkFlow()
	{
		return workFlow;
	}
	
	private String getCastTimeStamp() throws UnsupportedEncodingException, IOException
	{
		DateFormat dateFormatEV = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss"); 
		String timestamp = dateFormatEV.format(new Date());
		return timestamp;
	}

    @SuppressWarnings("rawtypes")
	@Override
    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException 
    {
    	int taskId;
    	int returnCode=0;
    	int feedbackCounter;
    	long startTime = System.nanoTime() ; 
    	Calendar cal = new GregorianCalendar();
    	int logIndex = 0;
    	Type collectionType = new TypeToken<Collection<String>>(){}.getType();
    	Collection<String> tmp;
    	List<String> logLines;
		String logString;

    	Gson gson = new Gson();
    	
    	boolean failBuild = getWorkFlow().trim().toLowerCase().equals("no");
        listener.getLogger().println("Web Service: "+webServiceAddress);
                
        CastWebServiceServiceLocator cbwsl = new CastWebServiceServiceLocator();
		cbwsl.setCastWebServicePortEndpointAddress(webServiceAddress);
		try {
	        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	        DateFormat dateFormatEV = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
			Date dateForToday = dateFormatEV.parse(getCastTimeStamp());
			
			//save the password in the "CAST_DATE" Jenkins environment for later use with the CMS Builder
			build.addAction(new PublishEnvVarAction("CAST_DATE", dateFormat.format(dateForToday)));			
			build.addAction(new PublishEnvVarAction("TODAY", dateFormat.format(dateForToday)));			
			EnvVars envVars = new EnvVars();
			envVars = build.getEnvironment(listener); 
			
			CastWebService cbws = cbwsl.getCastWebServicePort();	
			
			VersionInfo vi = RemoteHelper.getVersionInfo(webServiceAddress);
			if (!checkWebServiceCompatibility(vi.getVersion()))
			{
				listener.getLogger().println(String.format("Incompatible Web Service Version %s (Supported: %s)", vi.getVersion(), wsVersionCompatibility));
				return false || failBuild;
			}
			
			String appId = cbws.getApplicationUUID(appName);
			
			String versionNameWithTag = getVersionNameWithTag(dateForToday, envVars);
			listener.getLogger().println(String.format("[TODAY] = %s", dateFormat.format(dateForToday)));
			listener.getLogger().println(String.format("Version Name with Tags: %s", versionNameWithTag));
		
        	listener.getLogger().println("\nDelivery Manager Tool");        	
        	cal.setTime(getReleaseDateAsDate(dateForToday));
        	startTime = System.nanoTime(); 
        	taskId = cbws.deliveryManagerTool(appId, appName, referenceVersion, versionNameWithTag, cal);
        	
        	if (taskId < 0)
        	{
        		listener.getLogger().println(String.format("Error: %s",cbws.getErrorMessage(-taskId)));
            	return false || failBuild;
        	}
        	
        	feedbackCounter = 0;
        	logIndex = 0;
        	do
        	{
        		//Get Log
        		logString = cbws.getTaskOutput(taskId, logIndex);
    	        tmp = gson.fromJson(logString, collectionType);
    	        logLines = new ArrayList<String>(tmp);	        		
    	        logIndex += logLines.size();
    	        for(String s : logLines)
    	        {
    	        	listener.getLogger().println(s);
   	        	
    	        	String parts[] = s.split(":");
    	        	if (parts.length > 0)
    	        	{
    	        		if (parts[0].equalsIgnoreCase("Return value"))
    	        		{
    	        			returnCode = Integer.parseInt(parts[1].trim());
    	        		}
    	        	}
    	        }
    	        
        		Thread.sleep(1000);
        		feedbackCounter++;
        		if (feedbackCounter % 300 == 0)
        			listener.getLogger().println(String.format(" %s...",CastUtil.formatNanoTime(System.nanoTime() - startTime)));

        	} while (cbws.isTaskRunning(taskId));
        	
        	logString = cbws.getTaskOutput(taskId, logIndex);
	        tmp = gson.fromJson(logString, collectionType);
	        logLines = new ArrayList<String>(tmp);	        		
	        logIndex += logLines.size();
	        for(String s : logLines)
	        {
	        	listener.getLogger().println(s);
	        	String parts[] = s.split(":");
	        	if (returnCode == 0  && parts.length > 0)
	        	{
	        		if (parts[0].equalsIgnoreCase("Return value"))
	        		{
	        			returnCode = Integer.parseInt(parts[1].trim());
	        		}
	        	}
	        }
        	listener.getLogger().println(String.format("Duration: %s",CastUtil.formatNanoTime(System.nanoTime() - startTime)));
        	
        	
        	if (returnCode == 0)
        	{
        		returnCode = cbws.getTaskExitValue(taskId);
        	}
            
        	listener.getLogger().println(String.format("Return Code: %d", returnCode));
        	
        	if (returnCode != 0)
            	return false || failBuild;

        	listener.getLogger().println("");	        
	        	     
		} 
		catch (ServiceException | RemoteException | ParseException | InterruptedException | HelperException e) {
			listener.getLogger().println(
					String.format("Interrupted after: %s\n%s: %s", 
							CastUtil.formatNanoTime(System.nanoTime() - startTime),
							e.getClass().getName(),  
							e.getMessage()));
			return false || failBuild;
		} 
        return true;
    }

    @Override
    public DescriptorImpl getDescriptor() {
        return (DescriptorImpl)super.getDescriptor();
    }

    @Extension // This indicates to Jenkins that this is an implementation of an extension point.
    public static final class DescriptorImpl extends BuildStepDescriptor<Builder> {

        public DescriptorImpl() {
            load();
        }

        public FormValidation doCheckReleaseDate(@QueryParameter String value)
                throws IOException, ServletException {
            if (value.equals("[TODAY]"))
            	return FormValidation.ok();
        	try {
				new SimpleDateFormat("MM/dd/yyyy HH:mm:ss", Locale.ENGLISH).parse(value);
				return FormValidation.ok();
			} catch (ParseException e) {
				return FormValidation.error("Expected format is \"MM/dd/yyyy HH:mm:ss\"");
			}
        }

        @SuppressWarnings("rawtypes")
		public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            // Indicates that this builder can be used with all kinds of project types 
            return true;
        }

        public String getDisplayName() {
            return "Cast AIP - Delivery (WebService)";
        }        
        
        public FormValidation doTestConnection(@QueryParameter("webServiceAddress") final String webServiceAddress) throws IOException, ServletException {
            try {   		       		
        		return FormValidation.ok(String.format("Success (%s)", RemoteHelper.getVersionInfo(webServiceAddress).toString()));
        		
            } catch (HelperException e) {
            	return FormValidation.error(String.format("%s: %s", e.getClass().getName(), e.getMessage()));
    		}
        }
        
        public ListBoxModel doFillAppNameItems(
        		@QueryParameter("webServiceAddress") final String webServiceAddress) {
        	ListBoxModel m = new ListBoxModel();
        	
            try {
            	Collection<String> apps = RemoteHelper.listApplications(webServiceAddress);
        		
            	for(String app : apps)
            	{
            		m.add(app);
            	}        		
        		
            }  catch (HelperException e) {
    	    	return m;
			}
            return m;
        }
        
        public ListBoxModel doFillReferenceVersionItems(
        		@QueryParameter("webServiceAddress") final String webServiceAddress,
        		@QueryParameter("appName") final String appName) {
        	ListBoxModel m = new ListBoxModel();
        	
            try {
            	Collection<String> versions = RemoteHelper.listVersions(webServiceAddress, appName);
        		
            	for(String version : versions)
            	{
            		m.add(version);
            	}        		
        		
            }  catch (HelperException e) {
    	    	return m;
			}
            return m;
        }

        @Override
        public boolean configure(StaplerRequest req, JSONObject formData) throws FormException {
            save();
            return super.configure(req,formData);
        }

    }
}
