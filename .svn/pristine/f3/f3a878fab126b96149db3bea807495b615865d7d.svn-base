package com.castsoftware.jenkins.CastAIPWS;

import hudson.EnvVars;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;

import java.io.IOException;
import java.lang.reflect.Type;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.xml.rpc.ServiceException;

import net.sf.json.JSONObject;

import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;
import org.kohsuke.stapler.StaplerRequest;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.exception.HelperException;
import com.castsoftware.jenkins.CastAIPWS.util.AawsBlock;
import com.castsoftware.jenkins.CastAIPWS.util.AdBlock;
import com.castsoftware.jenkins.CastAIPWS.util.ArchiveBlock;
import com.castsoftware.jenkins.CastAIPWS.util.Constants;
import com.castsoftware.jenkins.CastAIPWS.util.PublishBlock;
import com.castsoftware.jenkins.CastAIPWS.util.RaBlock;
import com.castsoftware.jenkins.CastAIPWS.util.RsBlock;
import com.castsoftware.jenkins.CastAIPWS.util.RsvBlock;
import com.castsoftware.jenkins.CastAIPWS.util.Utils;
import com.castsoftware.jenkins.util.EnvTemplater;
import com.castsoftware.jenkins.util.PublishEnvVarAction;
import com.castsoftware.profiles.ConnectionProfile;
import com.castsoftware.util.CastUtil;
import com.castsoftware.util.VersionInfo;
import com.castsoftware.webservice.RemoteHelper;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class CastAIPBuilder extends Builder
{
	private final String dmtWebServiceAddress;
	private final String cmsWebServiceAddress;
	private final String appName;
	private final String versionName;
	private final String referenceVersion;
	private final String castMSConnectionProfile;
	private final String castCentralDB;
	private final String aadSchemaName;

	private final boolean da;
	private final boolean ad;
	private final boolean ra;
	private final boolean rs;
	private final boolean archive;
	private final boolean aaws;
	private final boolean rav;
	private final boolean publish;

	// private final String snapshotName;
	// private final String captureDate;
	private final String workFlow;

	// Fields in config.jelly must match the parameter names in the
	// "DataBoundConstructor"
	@DataBoundConstructor
	public CastAIPBuilder(String dmtWebServiceAddress, String appName, String referenceVersion, String versionName,
			String castMSConnectionProfile, AawsBlock aawsBlock, AdBlock daBlock, AdBlock adBlock, RaBlock raBlock,
			RsBlock rsBlock, RsvBlock ravBlock, PublishBlock publishBlock, ArchiveBlock archiveBlock, String workFlow,
			String castCentralDB, String aadSchemaName)
	{
		this.dmtWebServiceAddress = dmtWebServiceAddress;
		this.appName = appName;
		this.versionName = versionName;
		this.referenceVersion = referenceVersion;
		this.castMSConnectionProfile = castMSConnectionProfile;
		this.castCentralDB = castCentralDB;
		this.aadSchemaName=aadSchemaName;
		this.workFlow = workFlow;
  		
		// Use alternate Web Service for CMS
		if (aawsBlock != null) {
			this.aaws = true;
			this.cmsWebServiceAddress = aawsBlock.getCmsWebServiceAddress();
		} else {
			this.aaws = false;
			this.cmsWebServiceAddress = dmtWebServiceAddress;
		}

		// Deliver Code
		if (daBlock != null) {
			this.da = true;
		} else {
			this.da = false;
		}

		// Accept Delivery
		if (adBlock != null) {
			this.ad = true;
		} else {
			this.ad = false;
		}

		// Run Analysis
		if (raBlock != null) {
			this.ra = true;
		} else {
			this.ra = false;
		}

		// Run Snapshot
		if (rsBlock != null) {
			this.rs = true;
		} else {
			this.rs = false;
		}

		// Run Analysis Validation
		if (ravBlock != null) {
			this.rav = true;
		} else {
			this.rav = false;
		}

		// Publish snapshot
		if (publishBlock != null) {
			this.publish = true;
		} else {
			this.publish = false;
		}

		// Archive Delivery
		if (archiveBlock != null) {
			this.archive = true;
		} else {
			this.archive = false;
		}
	}

	private Boolean checkWebServiceCompatibility(String version)
	{
		return Constants.wsVersionCompatibility.equals(version);
	}

	public String getDmtWebServiceAddress()
	{
		return dmtWebServiceAddress;
	}

	public String getCmsWebServiceAddress()
	{

		return cmsWebServiceAddress == null || cmsWebServiceAddress.isEmpty() ? getDmtWebServiceAddress()
				: cmsWebServiceAddress;
	}
	
	public String getAadSchemaName()
	{
		return aadSchemaName;
	}

	public String getCastCentralDB()
	{
		return castCentralDB;
	}

	public String getAppName()
	{
		return appName;
	}

	public String getVersionName()
	{
		return versionName;
	}

	public String getReferenceVersion()
	{
		return referenceVersion;
	}

	public String getCastMSConnectionProfile()
	{
		return castMSConnectionProfile;
	}

	public boolean isDa()
	{
		return da;
	}

	public boolean isAaws()
	{
		return da;
	}

	public boolean isAd()
	{
		return ad;
	}

	public boolean isRa()
	{
		return ra;
	}

	public boolean isRs()
	{
		return rs;
	}

	public boolean isRav()
	{
		return rav;
	}

	public boolean isArchive()
	{
		return archive;
	}

	public boolean isPublish()
	{
		return publish;
	}

	public String getVersionNameWithTag(Date date, EnvVars envVars)
	{
		String s = versionName.replace("[TODAY]", Constants.dateFormatVersion.format(date));
		EnvTemplater jEnv = new EnvTemplater(envVars);
		s = jEnv.templateString(s);

		/**
		 * Pattern p = Pattern.compile("\\[([A-za-z0-9_]+)\\]"); Matcher m =
		 * p.matcher(s);
		 * 
		 * while (m.find()) { value = envVars.get(m.group(1)); if (value !=
		 * null) s = s.replace(m.group(), value); }
		 **/
		return s;
	}

/**
	 * Pattern p = Pattern.compile("\\[([A-za-z0-9_]+)\\]"); Matcher m =
	 * p.matcher(s);
	 * 
	 * while (m.find()) { value = envVars.get(m.group(1)); if (value != null) s
	 * = s.replace(m.group(), value); }
	 **/
	// return s;
	// }

	public String getWorkFlow()
	{
		return workFlow;
	}

	// private String getCastTimeStamp() throws ServiceException
	// {
	// String castDate=null;
	// if (envVars != null)
	// {
	// castDate = envVars.get(Constants.CAST_DATE);
	// }
	// if (castDate == null)
	// {
	// throw new ServiceException("CAST_DATE is not set");
	// }
	// return castDate;
	// }

	// public FormValidation
	// doTestConnection(@QueryParameter("webServiceAddress") final String
	// webServiceAddress) throws IOException, ServletException
	// {
	// try {
	// return FormValidation.ok(String.format("Success (%s)",
	// RemoteHelper.getVersionInfo(webServiceAddress).toString()));
	//
	// } catch (HelperException e) {
	// return FormValidation.error(String.format("%s: %s",
	// e.getClass().getName(), e.getMessage()));
	// }
	// }

	public ListBoxModel doFillAppNameItems(@QueryParameter("dmtWebServiceAddress") final String webServiceAddress)
	{
		ListBoxModel m = new ListBoxModel();

		try {
			Collection<String> apps = RemoteHelper.listApplications(webServiceAddress);

			for (String app : apps) {
				m.add(app);
			}

		} catch (HelperException e) {
			return m;
		}
		return m;
	}

	public ListBoxModel doFillCastMSConnectionProfileItems(
			@QueryParameter("cmsWebServiceAddress") final String webServiceAddress)
	{
		ListBoxModel m = new ListBoxModel();

		try {
			Collection<ConnectionProfile> cpList = RemoteHelper.listConnectionProfiles(webServiceAddress);

			for (ConnectionProfile cp : cpList) {
				m.add(cp.getName(), cp.getName());
			}

		} catch (HelperException e) {
			return m;
		}
		return m;
	}

	@SuppressWarnings("rawtypes")
	public boolean publishVariables(AbstractBuild build, BuildListener listener, String castDate) throws IOException,
			InterruptedException
	{
		boolean rslt = true;
		Date dateForToday;
		try {
			EnvVars envVars = build.getEnvironment(listener);
			dateForToday = Constants.castDateFormat.parse(castDate);

			String snapshotName = "Computed on " + Constants.dateFormatVersion.format(dateForToday);

			build.addAction(new PublishEnvVarAction(Constants.CAST_DATE, castDate));
			build.addAction(new PublishEnvVarAction(Constants.DMT_WEB_SERVICE_ADDRESS, getDmtWebServiceAddress()));
			build.addAction(new PublishEnvVarAction(Constants.CMS_WEB_SERVICE_ADDRESS, getCmsWebServiceAddress()));
			build.addAction(new PublishEnvVarAction(Constants.APPLICATION_NAME, getAppName()));
			build.addAction(new PublishEnvVarAction(Constants.VERSION_NAME,
					getVersionNameWithTag(dateForToday, envVars)));
			build.addAction(new PublishEnvVarAction(Constants.AAD_SCHEMA_NAME, getAadSchemaName()));
			build.addAction(new PublishEnvVarAction(Constants.CENTRAL_DB_NAME, getCastCentralDB()));
			build.addAction(new PublishEnvVarAction(Constants.CONNECTION_PROFILE, getCastMSConnectionProfile()));
			// build.addAction(new PublishEnvVarAction(Constants.CAPTURE_DATE,
			// Constants.castDateFormat
			// .format(dateForToday)));
			build.addAction(new PublishEnvVarAction(Constants.SNAPSHOT_NAME, snapshotName));
			build.addAction(new PublishEnvVarAction(Constants.DELIVERY_APPLICATION, Boolean.toString(isDa())));
			build.addAction(new PublishEnvVarAction(Constants.ACCEPT_DELIVERY, Boolean.toString(isAd())));
			build.addAction(new PublishEnvVarAction(Constants.RUN_ANALYSIS, Boolean.toString(isRa())));
			build.addAction(new PublishEnvVarAction(Constants.RUN_SNAPSHOT, Boolean.toString(isRs())));
			build.addAction(new PublishEnvVarAction(Constants.RUN_SNAPSHOT_VALIDATION, Boolean.toString(isRav())));
			build.addAction(new PublishEnvVarAction(Constants.ARCHIVE_DELIVERY, Boolean.toString(isArchive())));
			build.addAction(new PublishEnvVarAction(Constants.TODAY, Constants.castDateFormat.format(dateForToday)));
			build.addAction(new PublishEnvVarAction(Constants.WORK_FLOW, getWorkFlow()));
			build.addAction(new PublishEnvVarAction(Constants.REFERENCE_VERSION, getReferenceVersion()));

			rslt = Utils.validateBuildVariables(build, listener);

		} catch (ParseException e) {
			listener.error("Unable to publish CAST Enviroment Variables: %s", e.getMessage());
			return false;
		}
		return rslt;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException,
			InterruptedException
	{
		int taskId;
		int returnCode;
		int feedbackCounter;
		long startTime = System.nanoTime();

		EnvVars envVars = build.getEnvironment(listener);
		int startAt;
		try {
			startAt = Integer.parseInt(envVars.get(Constants.START_AT));
		} catch (NumberFormatException e) {
			startAt = 0;
		}
		String castDate = envVars.get(Constants.CAST_DATE);
		if (startAt < Constants.AcceptDelivery) {
			castDate = Constants.castDateFormat.format(new Date());
		}
		if (!publishVariables(build, listener, castDate)) {
			return false;
		}
		listener.getLogger().println("****CAST Application Inteligence Platform****");

		listener.getLogger().println(String.format("START_AT: %d", startAt));
		listener.getLogger().println(String.format("CAST_DATE: %s", castDate));

		String logString;
		Type collectionType = new TypeToken<Collection<String>>()
		{
		}.getType();
		Collection<String> tmp;
		List<String> logLines;

		int logIndex = 0;

		boolean failBuild = getWorkFlow().trim().toLowerCase().equals("no");

		Gson gson = new Gson();

		listener.getLogger().println(String.format("DMT Web Service Address:  %s", getDmtWebServiceAddress()));
		listener.getLogger().println(String.format("CMS Web Service Address:  %s", getCmsWebServiceAddress()));

		CastWebServiceServiceLocator cbwsl = new CastWebServiceServiceLocator();
		cbwsl.setCastWebServicePortEndpointAddress(getCmsWebServiceAddress());
		try {
			CastWebService cbws = cbwsl.getCastWebServicePort();

			Date dateForToday = Constants.castDateFormat.parse(castDate);
			String versionNameWithTag = getVersionName().replace("[TODAY]",
					Constants.dateFormatVersion.format(dateForToday));

			VersionInfo vi = RemoteHelper.getVersionInfo(getCmsWebServiceAddress());
			if (!checkWebServiceCompatibility(vi.getVersion())) {
				listener.getLogger().println(
						String.format("Incompatible Web Service Version %s (Supported: %s)", vi.getVersion(),
								Constants.wsVersionCompatibility));
				return false || failBuild;
			}

			String appId = cbws.getApplicationUUID(appName);

			if (da) {
				CastAIPDeliverBuilder ccab = new CastAIPDeliverBuilder();
				ccab.setDoValidation(false);
				if (!ccab.perform(build, launcher, listener)) {
					return false || failBuild;
				}
			}

			if (ad) {
				CastAIPAcceptBuilder ccab = new CastAIPAcceptBuilder();
				ccab.setDoValidation(false);
				if (!ccab.perform(build, launcher, listener)) {
					return false || failBuild;
				}
			}

			if (ra) {
				CastAIPAnalyzeBuilder ccab = new CastAIPAnalyzeBuilder();
				ccab.setDoValidation(false);
				if (!ccab.perform(build, launcher, listener)) {
					return false || failBuild;
				}
			}

			if (rs) {
				CastAIPSnapshotBuilder ccab = new CastAIPSnapshotBuilder();
				ccab.setDoValidation(false);
				if (!ccab.perform(build, launcher, listener)) {
					return false || failBuild;
				}
			}

			if (rav) {
				CastAIPValidationBuilder ccab = new CastAIPValidationBuilder();
				ccab.setDoValidation(false);
				if (!ccab.perform(build, launcher, listener)) {
					return false || failBuild;
				}
			}

			if (publish) {
				CastAIPPublishBuilder ccab = new CastAIPPublishBuilder();
				ccab.setDoValidation(false);
				if (!ccab.perform(build, launcher, listener)) {
					return false || failBuild;
				}
			}

			if (archive) {
				listener.getLogger().println("Archive Delivery");
				startTime = System.nanoTime();
				taskId = cbws.archiveDelivery(appId, versionNameWithTag);

				if (taskId < 0) {
					listener.getLogger().println(String.format("Error: %s", cbws.getErrorMessage(-taskId)));
					return false || failBuild;
				}

				feedbackCounter = 0;
				logIndex = 0;
				do {
					// Get Log
					logString = cbws.getTaskOutput(taskId, logIndex);
					tmp = gson.fromJson(logString, collectionType);
					logLines = new ArrayList<String>(tmp);
					logIndex += logLines.size();
					for (String s : logLines)
						listener.getLogger().println(s);

					Thread.sleep(1000);
					feedbackCounter++;
					if (feedbackCounter % 300 == 0)
						listener.getLogger().println(
								String.format(" %s...", CastUtil.formatNanoTime(System.nanoTime() - startTime)));

				} while (cbws.isTaskRunning(taskId));

				// Get Log
				logString = cbws.getTaskOutput(taskId, logIndex);
				tmp = gson.fromJson(logString, collectionType);
				logLines = new ArrayList<String>(tmp);
				logIndex += logLines.size();
				for (String s : logLines)
					listener.getLogger().println(s);

				listener.getLogger().println(
						String.format("Duration: %s", CastUtil.formatNanoTime(System.nanoTime() - startTime)));

				returnCode = cbws.getTaskExitValue(taskId);

				listener.getLogger().println(String.format("Return Code: %d", returnCode));

				if (returnCode != 0) return false || failBuild;

				listener.getLogger().println(" ");
			}
		} catch (ServiceException | RemoteException | ParseException | InterruptedException | HelperException e) {
			listener.getLogger().println(
					String.format("Interrupted after: %s\n%s: %s",
							CastUtil.formatNanoTime(System.nanoTime() - startTime), e.getClass().getName(),
							e.getMessage()));
			return false || failBuild;
		}
		return true;
	}

	// Overridden for better type safety.
	// If your plugin doesn't really define any property on Descriptor,
	// you don't have to do this.
	@Override
	public DescriptorImpl getDescriptor()
	{
		return (DescriptorImpl) super.getDescriptor();
	}

	/**
	 * Descriptor for {@link CastAIPBuilder}. Used as a singleton. The class is
	 * marked as public so that it can be accessed from views.
	 *
	 * <p>
	 * See
	 * <tt>src/main/resources/hudson/plugins/hello_world/CastDMTBuilder/*.jelly</tt>
	 * for the actual HTML fragment for the configuration screen.
	 */
	@Extension
	// This indicates to Jenkins that this is an implementation of an extension
	// point.
	public static final class DescriptorImpl extends BuildStepDescriptor<Builder>
	{

		private boolean useDMT;

		public DescriptorImpl()
		{
			load();
		}

		// public FormValidation doCheckCaptureDate(@QueryParameter String
		// value)
		// throws IOException, ServletException {
		// if (value.equals("[TODAY]"))
		// return FormValidation.ok();
		// try {
		// new SimpleDateFormat("MM/dd/yyyy HH:mm:ss",
		// Locale.ENGLISH).parse(value);
		// return FormValidation.ok();
		// } catch (ParseException e) {
		// return
		// FormValidation.error("Expected format is \"MM/dd/yyyy HH:mm:ss\"");
		// }
		// }

		@SuppressWarnings("rawtypes")
		public boolean isApplicable(Class<? extends AbstractProject> aClass)
		{
			// Indicates that this builder can be used with all kinds of project
			// types
			return true;
		}

		/**
		 * This human readable name is used in the configuration screen.
		 */
		public String getDisplayName()
		{
			return "CAST AIP: Configuration";
		}

		public FormValidation doTestConnection(
				@QueryParameter("dmtWebServiceAddress") final String dmtWebServiceAddress,
				@QueryParameter("cmsWebServiceAddress") String cmsWebServiceAddress) throws IOException,
				ServletException
		{
			try {
				if (dmtWebServiceAddress.isEmpty()) {
					return FormValidation.error("Delivery Web Service Address must have a value!");
				} else if (cmsWebServiceAddress.replaceAll("\t", "").isEmpty()) {
					cmsWebServiceAddress = dmtWebServiceAddress;
				}
				VersionInfo dvi = RemoteHelper.getVersionInfo(dmtWebServiceAddress);
				VersionInfo cvi = RemoteHelper.getVersionInfo(cmsWebServiceAddress);
				return FormValidation.ok(String.format("Delivery Address Success (%s)\nAnalysis Address Success (%s)",
						dvi.toString(), cvi.toString()));

			} catch (HelperException e) {
				return FormValidation.error(String.format("%s: %s", e.getClass().getName(), e.getMessage()));
			}
		}

		public ListBoxModel doFillReferenceVersionItems(
				@QueryParameter("dmtWebServiceAddress") final String webServiceAddress,
				@QueryParameter("appName") final String appName)
		{
			ListBoxModel m = new ListBoxModel();

			try {
				Collection<String> versions = RemoteHelper.listVersions(webServiceAddress, appName);

				for (String version : versions) {
					m.add(version);
				}

			} catch (HelperException e) {
				return m;
			}
			return m;
		}

		public ListBoxModel doFillCastMSConnectionProfileItems(
				@QueryParameter("dmtWebServiceAddress") final String dmtWebServiceAddress,
				@QueryParameter("cmsWebServiceAddress") final String cmsWebServiceAddress)
		{
			ListBoxModel m = new ListBoxModel();

			try {
				String webServiceAddress = cmsWebServiceAddress == null || cmsWebServiceAddress.isEmpty() ? dmtWebServiceAddress
						: cmsWebServiceAddress;
				Collection<ConnectionProfile> cpList = RemoteHelper.listConnectionProfiles(webServiceAddress);

				for (ConnectionProfile cp : cpList) {
					m.add(cp.getName(), cp.getName());
				}

			} catch (HelperException e) {
				return m;
			}
			return m;
		}

		public ListBoxModel doFillAppNameItems(@QueryParameter("dmtWebServiceAddress") final String webServiceAddress)
		{
			ListBoxModel m = new ListBoxModel();

			try {
				Collection<String> apps = RemoteHelper.listApplications(webServiceAddress);

				for (String app : apps) {
					m.add(app);
				}

			} catch (HelperException e) {
				return m;
			}
			return m;
		}

		@Override
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException
		{
			useDMT = formData.getBoolean("useDMT");
			save();
			return super.configure(req, formData);
		}

		public boolean getUseDMT()
		{
			return useDMT;
		}
	}
}
