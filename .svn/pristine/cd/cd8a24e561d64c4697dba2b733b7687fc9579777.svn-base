package com.castsoftware.jenkins.CastAIPWS;

import hudson.EnvVars;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;

import java.io.IOException;
import java.rmi.RemoteException;
import java.util.List;

import javax.xml.rpc.ServiceException;
import javax.xml.soap.SOAPException;

import net.sf.json.JSONObject;

import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.exception.HelperException;
import com.castsoftware.jenkins.CastAIPWS.util.Constants;
import com.castsoftware.util.CastUtil;
import com.castsoftware.util.VersionInfo;
import com.castsoftware.vps.ValidationProbesService;
import com.castsoftware.vps.vo.ValidationResults;
import com.castsoftware.webservice.RemoteHelper;

public class CastAIPValidationBuilder extends Builder
{

	// Fields in config.jelly must match the parameter names in the
	// "DataBoundConstructor"
	@DataBoundConstructor
	public CastAIPValidationBuilder()
	{
	}

	private boolean doValidation = true;

	public void setDoValidation(boolean doValidation)
	{
		this.doValidation = doValidation;
	}

	public boolean isDoValidation()
	{
		return doValidation;
	}

	private Boolean checkWebServiceCompatibility(String version)
	{
		return Constants.wsVersionCompatibility.equals(version);
	}

	public boolean ValidateConfiguration(AbstractBuild<?, ?> build, BuildListener listener)
	{
		String errMsg = "";

		EnvVars envVars;
		try {
			envVars = build.getEnvironment(listener);
			boolean rsv = Boolean.valueOf(envVars.get(Constants.RUN_SNAPSHOT_VALIDATION));
			boolean archive = Boolean.valueOf(envVars.get(Constants.ARCHIVE_DELIVERY));

			if (envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS).isEmpty()) {
				listener.getLogger().print("Invalid configuration:  CAST AIP - Analysis task does not exist");
				return false;
			}

			if (rsv) {
				errMsg = "Snapshot Validation";
			} else if (archive) {
				errMsg = "Archive Delivery";
			}
			if (!errMsg.isEmpty()) {
				listener.getLogger().print("");
				listener.getLogger().printf(
						"Invalid configuration:  Can not use \"%s\" task while \"%s\" is checked in the ",
						getDescriptor().getDisplayName(), errMsg);
				listener.getLogger().print("");
				return false;
			}
		} catch (IOException | InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return true;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException,
			InterruptedException
	{
		long startTime = System.nanoTime();

		EnvVars envVars = build.getEnvironment(listener);
		int startAt;
		try {
			startAt = Integer.parseInt(envVars.get(Constants.START_AT));
		} catch (NumberFormatException e) {
			startAt=0;
		}
		if (startAt > Constants.RunValidation) {
			listener.getLogger().println(" ");
			listener.getLogger().println(
					String.format("${START_AT} = %d, skipping run snapshot validation step.", startAt));
			return true;
		} else {
			listener.getLogger().println("");
			listener.getLogger().println("Validate Snapshot");
	
			if (isDoValidation() && !ValidateConfiguration(build, listener)) {
				return false;
			}
	
			String castDate = envVars.get(Constants.CAST_DATE);
			String webServiceAddress = envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS);
			String appName = envVars.get(Constants.APPLICATION_NAME);
			String versionName = envVars.get(Constants.VERSION_NAME);
			String snapshotName = envVars.get(Constants.SNAPSHOT_NAME);
	
			CastWebServiceServiceLocator cbwsl = new CastWebServiceServiceLocator();
			cbwsl.setCastWebServicePortEndpointAddress(webServiceAddress);
			boolean pass = true;
			try {
				CastWebService cbws = cbwsl.getCastWebServicePort();
	
				VersionInfo vi = RemoteHelper.getVersionInfo(webServiceAddress);
				if (!checkWebServiceCompatibility(vi.getVersion())) {
					listener.getLogger().println(
							String.format("Incompatible Web Service Version %s (Supported: %s)", vi.getVersion(),
									Constants.wsVersionCompatibility));
					return false;
				}
	
				// Validate Snapshot Results
	
				listener.getLogger()
						.println(String.format("Running Snapshot Validation for %s - %s", appName, snapshotName));
				String validateionProbURL = cbws.getValidationProbURL();
				ValidationProbesService vps = new ValidationProbesService(validateionProbURL);
	
				StringBuffer output = new StringBuffer();
				List<ValidationResults> allChecks = vps.runAllChecks(appName, snapshotName);
				for (ValidationResults result : allChecks) {
					output.setLength(0);
					output.append(result.getCheckNumber()).append("-").append(result.getTestDescription()).append(":")
							.append(result.getAdvice());
					listener.getLogger().println(output);
					if (result.getAdvice().equals("NO GO")) {
						pass = false;
					}
				}
				listener.getLogger().println(String.format("This application has %s", (pass ? "passed" : "failed")));
				
				
				vps.UpdateRescanStatus(appName, versionName, castDate, "Validation - "+ (pass ? " - OK" : " - Error"), "Validation");
				
				listener.getLogger().println(" ");
			} catch (ServiceException | RemoteException | HelperException | UnsupportedOperationException | SOAPException e) {
				listener.getLogger().println(
						String.format("Interrupted after: %s\n%s: %s",
								CastUtil.formatNanoTime(System.nanoTime() - startTime), e.getClass().getName(),
								e.getMessage()));
				return false;
			}
			return pass;
		}
	}

	/**
	 * Descriptor for {@link CastAIPBuilder}. Used as a singleton. The class is
	 * marked as public so that it can be accessed from views.
	 *
	 * <p>
	 * See
	 * <tt>src/main/resources/hudson/plugins/hello_world/CastDMTBuilder/*.jelly</tt>
	 * for the actual HTML fragment for the configuration screen.
	 */
	@Extension
	// This indicates to Jenkins that this is an implementation of an extension
	// point.
	public static final class DescriptorImpl extends BuildStepDescriptor<Builder>
	{

		private boolean useDMT;

		public DescriptorImpl()
		{
			load();
		}

		@SuppressWarnings("rawtypes")
		public boolean isApplicable(Class<? extends AbstractProject> aClass)
		{
			// Indicates that this builder can be used with all kinds of project
			// types
			return true;
		}

		/**
		 * This human readable name is used in the configuration screen.
		 */
		public String getDisplayName()
		{
			return "CAST AIP 5: Snapshot Validation";
		}

		@Override
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException
		{
			useDMT = formData.getBoolean("useDMT");
			save();
			return super.configure(req, formData);
		}

		public boolean getUseDMT()
		{
			return useDMT;
		}
	}
}
