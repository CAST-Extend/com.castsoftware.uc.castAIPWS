package com.castsoftware.jenkins.CastAIPWS;

import hudson.EnvVars;
import hudson.Extension;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;

import java.io.IOException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.xml.rpc.ServiceException;

import net.sf.json.JSONObject;

import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.exception.HelperException;
import com.castsoftware.jenkins.CastAIPWS.util.Constants;
import com.castsoftware.jenkins.CastAIPWS.util.Utils;
import com.castsoftware.util.CastUtil;
import com.castsoftware.util.VersionInfo;
import com.castsoftware.webservice.RemoteHelper;

public class CastAIPAcceptBuilder extends Builder
{

	// Fields in config.jelly must match the parameter names in the
	// "DataBoundConstructor"
	@DataBoundConstructor
	public CastAIPAcceptBuilder()
	{
	}

	private boolean doValidation = true;

	public void setDoValidation(boolean doValidation)
	{
		this.doValidation = doValidation;
	}

	public boolean isDoValidation()
	{
		return doValidation;
	}

	private Boolean checkWebServiceCompatibility(String version)
	{
		return Constants.wsVersionCompatibility.equals(version);
	}

	public boolean ValidateConfiguration(AbstractBuild<?, ?> build, BuildListener listener)
	{
		String errMsg = "";

		EnvVars envVars;
		try {
			envVars = build.getEnvironment(listener);
			boolean ad = Boolean.valueOf(envVars.get(Constants.ACCEPT_DELIVERY));
			boolean ra = Boolean.valueOf(envVars.get(Constants.RUN_ANALYSIS));
			boolean rs = Boolean.valueOf(envVars.get(Constants.RUN_SNAPSHOT));
			boolean archive = Boolean.valueOf(envVars.get(Constants.ARCHIVE_DELIVERY));

			if (envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS).isEmpty()) {
				listener.getLogger().print("Invalid configuration:  CAST AIP - Analysis task does not exist");
				return false;
			}

			if (ad) {
				errMsg = "Accept Analysis";
			} else if (ra) {
				errMsg = "Run Analysis";
			} else if (rs) {
				errMsg = "Run Snapshot";
			} else if (archive) {
				errMsg = "Archive Delivery";
			}
			if (!errMsg.isEmpty()) {
				listener.getLogger().print("");
				listener.getLogger().printf(
						"Invalid configuration:  Can not use \"%s\" task while \"%s\" is checked in the ",
						getDescriptor().getDisplayName(), errMsg);
				listener.getLogger().print("");
				return false;
			}
		} catch (IOException | InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return true;
	}

	@SuppressWarnings("rawtypes")
	@Override
	public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException,
			InterruptedException
	{
		int taskId;
		long startTime = System.nanoTime();

		EnvVars envVars = build.getEnvironment(listener);
		int startAt;
		try {
			startAt = Integer.parseInt(envVars.get(Constants.START_AT));
		} catch (NumberFormatException e) {
			startAt=0;
		}
		if (startAt > Constants.AcceptDelivery) {
			listener.getLogger().println(" ");
			listener.getLogger().println(
					String.format("${START_AT} = %d, skipping delivery acceptance step.", startAt));
		} else {
	 	 	listener.getLogger().println("");
			listener.getLogger().println("Accept Delivery");

			if (isDoValidation() && !ValidateConfiguration(build, listener)) {
				return false;
			}
	
			String castDate = envVars.get(Constants.CAST_DATE);
			String webServiceAddress = envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS);
			String appName = envVars.get(Constants.APPLICATION_NAME);
			String versionName = envVars.get(Constants.VERSION_NAME);
			String castMSConnectionProfile = envVars.get(Constants.CONNECTION_PROFILE);
			String workFlow = envVars.get(Constants.WORK_FLOW);
	
			boolean failBuild = workFlow.trim().toLowerCase().equals("no");
			listener.getLogger().println("Web Service: " + webServiceAddress);
	
			CastWebServiceServiceLocator cbwsl = new CastWebServiceServiceLocator();
			cbwsl.setCastWebServicePortEndpointAddress(webServiceAddress);
			try {
				CastWebService cbws = cbwsl.getCastWebServicePort();
	
				Date dateForToday = Constants.castDateFormat.parse(castDate);
				String versionNameWithTag = versionName
						.replace("[TODAY]", Constants.dateFormatVersion.format(dateForToday));
	
				listener.getLogger().println(String.format("Application Name: %s", appName));
				listener.getLogger().println(String.format("Version Name: %s", versionName));
				listener.getLogger().println(String.format("Connection Profile Name: %s", castMSConnectionProfile));
	
				VersionInfo vi = RemoteHelper.getVersionInfo(webServiceAddress);
				if (!checkWebServiceCompatibility(vi.getVersion())) {
					listener.getLogger().println(
							String.format("Incompatible Web Service Version %s (Supported: %s)", vi.getVersion(),
									Constants.wsVersionCompatibility));
					return false || failBuild;
				}
	
				// Accept Deliver
				startTime = System.nanoTime();
				Calendar cal = new GregorianCalendar();
				cal.setTime(dateForToday);
	
				taskId = cbws.acceptDelivery(appName, versionName, castMSConnectionProfile, cal);
	
				if (taskId < 0) {
					listener.getLogger().println(String.format("Error: %s", cbws.getErrorMessage(-taskId)));
					return false || failBuild;
				} else if (!Utils.getLog(cbws, taskId, startTime, listener)) {
					return false;
				}
	
				// Set As Current Version
				listener.getLogger().println("");
				listener.getLogger().println("Set As Current Version");
				startTime = System.nanoTime();
				taskId = cbws.setAsCurrentVersion(appName, versionNameWithTag, castMSConnectionProfile, cal);
	
				if (taskId < 0) {
					listener.getLogger().println(String.format("Error: %s", cbws.getErrorMessage(-taskId)));
					return false || failBuild;
				}
	
				if (!Utils.getLog(cbws, taskId, startTime, listener)) {
					return false;
				}
	
				listener.getLogger().println("");
			} catch (ServiceException | RemoteException | ParseException | HelperException e) {
				listener.getLogger().println(
						String.format("Interrupted after: %s\n%s: %s",
								CastUtil.formatNanoTime(System.nanoTime() - startTime), e.getClass().getName(),
								e.getMessage()));
				return false || failBuild;
			}
		}
		return true;
	}

	/**
	 * Descriptor for {@link CastAIPBuilder}. Used as a singleton. The class is
	 * marked as public so that it can be accessed from views.
	 *
	 * <p>
	 * See
	 * <tt>src/main/resources/hudson/plugins/hello_world/CastDMTBuilder/*.jelly</tt>
	 * for the actual HTML fragment for the configuration screen.
	 */
	@Extension
	// This indicates to Jenkins that this is an implementation of an extension
	// point.
	public static final class DescriptorImpl extends BuildStepDescriptor<Builder>
	{

		private boolean useDMT;

		public DescriptorImpl()
		{
			load();
		}

		@SuppressWarnings("rawtypes")
		public boolean isApplicable(Class<? extends AbstractProject> aClass)
		{
			// Indicates that this builder can be used with all kinds of project
			// types
			return true;
		}

		/**
		 * This human readable name is used in the configuration screen.
		 */
		public String getDisplayName()
		{
			return "CAST AIP 2: Accept Delivery";
		}

		@Override
		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException
		{
			useDMT = formData.getBoolean("useDMT");
			save();
			return super.configure(req, formData);
		}

		public boolean getUseDMT()
		{
			return useDMT;
		}
	}
}
