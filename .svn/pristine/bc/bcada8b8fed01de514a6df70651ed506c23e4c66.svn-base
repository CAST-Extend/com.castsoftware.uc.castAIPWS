package com.castsoftware.jenkins.CastAIPWS.util;

import hudson.EnvVars;
import hudson.model.AbstractBuild;
import hudson.model.BuildListener;

import java.io.IOException;
import java.lang.reflect.Type;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.util.CastUtil;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class Utils
{
	static public boolean validateBuildVariables(AbstractBuild build, BuildListener listener)
	{
		boolean rslt = true;
		EnvVars envVars;
		try {
			envVars = build.getEnvironment(listener);
			// make sure everything is set properly
			if (envVars.get(Constants.DMT_WEB_SERVICE_ADDRESS).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.DMT_WEB_SERVICE_ADDRESS);
				rslt = false;
			}
			if (envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.CMS_WEB_SERVICE_ADDRESS);
				rslt = false;
			}
			if (envVars.get(Constants.VERSION_NAME).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.VERSION_NAME);
				rslt = false;
			}
			if (envVars.get(Constants.CONNECTION_PROFILE).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.CONNECTION_PROFILE);
				rslt = false;
			}
//			if (envVars.get(Constants.CAPTURE_DATE).isEmpty()) {
//				listener.getLogger().printf("%s is not set", Constants.CAPTURE_DATE);
//				rslt = false;
//			}
			if (envVars.get(Constants.SNAPSHOT_NAME).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.SNAPSHOT_NAME);
				rslt = false;
			}
			if (envVars.get(Constants.TODAY).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.TODAY);
				rslt = false;
			}
			if (envVars.get(Constants.WORK_FLOW).isEmpty()) {
				listener.getLogger().printf("%s is not set", Constants.WORK_FLOW);
				rslt = false;
			}
		} catch (IOException | InterruptedException e) {
			listener.getLogger().println(e.getMessage());
			rslt = false;
		}
		return rslt;
	}

	static public boolean getLog(CastWebService cbws, int taskId, long startTime, BuildListener listener)
	{
		int returnCode;
		int feedbackCounter;
		int logIndex;
		String logString;
		Gson gson = new Gson();
		Type collectionType = new TypeToken<Collection<String>>()
		{
		}.getType();
		Collection<String> tmp;
		List<String> logLines;

		try {
			feedbackCounter = 0;
			logIndex = 0;
			do {
				// Get Log
				Thread.sleep(1000);
				logString = cbws.getTaskOutput(taskId, logIndex);
				tmp = gson.fromJson(logString, collectionType);
				if (tmp != null) {
					logLines = new ArrayList<String>(tmp);
					logIndex += logLines.size();
					for (String s : logLines)
						listener.getLogger().println(s);

					feedbackCounter++;
					if (feedbackCounter % 300 == 0)
						listener.getLogger().println(
								String.format(" %s...", CastUtil.formatNanoTime(System.nanoTime() - startTime)));
				}
			} while (cbws.isTaskRunning(taskId));

			// Get Log
			logString = cbws.getTaskOutput(taskId, logIndex);
			tmp = gson.fromJson(logString, collectionType);
			if (tmp != null) {
				logLines = new ArrayList<String>(tmp);
				logIndex += logLines.size();
				for (String s : logLines)
					listener.getLogger().println(s);
			}

			listener.getLogger().println(
					String.format("Duration: %s", CastUtil.formatNanoTime(System.nanoTime() - startTime)));

			returnCode = cbws.getTaskExitValue(taskId);

			listener.getLogger().println(String.format("Return Code: %d", returnCode));
		} catch (RemoteException | InterruptedException e) {
			listener.getLogger().printf("Web Service Connection Error: %s", e.getMessage());
			return false;
		} 

		listener.getLogger().println(" ");

		return (returnCode == 0) ? true : false;
	}

}
