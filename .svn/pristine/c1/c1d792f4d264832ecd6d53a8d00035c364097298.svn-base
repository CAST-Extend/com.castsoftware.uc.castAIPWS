package com.castsoftware.jenkins.CastAIPWS;

import hudson.EnvVars;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.tasks.Builder;

import java.io.IOException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.util.Calendar;

import javax.xml.rpc.ServiceException;

import org.kohsuke.stapler.DataBoundConstructor;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.exception.HelperException;
import com.castsoftware.jenkins.CastAIPWS.util.Constants;
import com.castsoftware.jenkins.CastAIPWS.util.Utils;

public class CastAIPDeliverBuilder extends Builder
{

	// Fields in config.jelly must match the parameter names in the
	// "DataBoundConstructor"
	@DataBoundConstructor
	public CastAIPDeliverBuilder()
	{
	}

	@SuppressWarnings("rawtypes")
	@Override
	public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException,
			InterruptedException
	{
		int taskId;
		long startTime = System.nanoTime();

		EnvVars envVars = build.getEnvironment(listener);
		int startAt;
		try {
			startAt = Integer.parseInt(envVars.get(Constants.START_AT));
		} catch (NumberFormatException e) {
			startAt = 0;
		}
		listener.getLogger().println(" ");
		if (startAt > Constants.RunDMT) {
			listener.getLogger().println(String.format("${START_AT} = %d, skipping delivery step.", startAt));
		} else {
			listener.getLogger().println("Deliver Application");

			String castDate = envVars.get(Constants.CAST_DATE);
			String dmtWebServiceAddress = envVars.get(Constants.DMT_WEB_SERVICE_ADDRESS);
			String cmsWebServiceAddress = envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS);
			String appName = envVars.get(Constants.APPLICATION_NAME);
			String versionName = envVars.get(Constants.VERSION_NAME);
			String workFlow = envVars.get(Constants.WORK_FLOW);
			String referenceVersion = envVars.get(Constants.REFERENCE_VERSION);
			boolean isUseJnlp = Boolean.parseBoolean(envVars.get(Constants.RUN_JNLP_DELIVERY));
			
			boolean failBuild = workFlow.trim().toLowerCase().equals("no");
			listener.getLogger().println("DMT Web Service: " + dmtWebServiceAddress);
			listener.getLogger().println("CMS Web Service: " + cmsWebServiceAddress);

			CastWebServiceServiceLocator cbwsld = new CastWebServiceServiceLocator();
			cbwsld.setCastWebServicePortEndpointAddress(dmtWebServiceAddress);

			CastWebServiceServiceLocator cbwslc = new CastWebServiceServiceLocator();
			cbwslc.setCastWebServicePortEndpointAddress(dmtWebServiceAddress);
			try {
				CastWebService cbwsd = cbwsld.getCastWebServicePort();
				CastWebService cbwsc = cbwsld.getCastWebServicePort();

				if (!Utils.validateWebServiceVersion(dmtWebServiceAddress, listener)) {
					return false;
				}

				String appId = cbwsc.getApplicationUUID(appName);

				listener.getLogger().println("\nDelivery Manager Tool");
				
				Calendar cal = Utils.convertCastDate(castDate);
				startTime = System.nanoTime();

				if (isUseJnlp)
				{
					taskId = cbwsd.automateDeliveryJNLP(appId, appName, referenceVersion, versionName, cal);
				} else {
					taskId = cbwsd.deliveryManagerTool(appId, appName, referenceVersion, versionName, cal);
				}
				if (taskId < 0) {
					listener.getLogger().println(String.format("Error: %s", cbwsd.getErrorMessage(-taskId)));
					return false || failBuild;
				}

				if (!Utils.getLog(cbwsd, taskId, startTime, listener)) {
					return false;
				}

				listener.getLogger().println(" ");
				listener.getLogger().println("Delivery Report");
				int retCode = 0;
				taskId = cbwsc.deliveryReport(appId, appName, referenceVersion, versionName, cal);
				switch (taskId)
				{
					case -1:
						listener.getLogger().println("An exception has occured during the delivery report execution");
						listener.getLogger().println("See the CAST Batch Web Service mainlog for more information");
						listener.getLogger().println(String.format("Error: %s", cbwsc.getErrorMessage(-taskId)));
						break;
					case -2:
						listener.getLogger().println("Can't find java executor, please update CastAIPWS.properties file");
						break;
					case -3:
						listener.getLogger().println("Can't find CASTDeliveryReporter.jar file, please update CastAIPWS.properties file");
						break;
					case -4:
						listener.getLogger().println("Delivery folder has not been set, please update CastAIPWS.properties file");
						break;
					default:
						if (!Utils.getLog(cbwsc, taskId, startTime, listener)) {
							retCode = cbwsc.getTaskExitValue(taskId);
							return false;
						}						
						break;
				}
				listener.getLogger().println(" ");
				
			} catch (ServiceException | RemoteException | ParseException | HelperException e) {
				listener.getLogger().println(
						String.format("%s error accured while generating the packaging and delivering the code!",
								e.getMessage()));
				return false || failBuild;
			}
		}
		
		//are there any remaining steps to run, if so run them now
		if (!Utils.runJobs(build, launcher, listener, this.getClass(), Constants.RunDMT))
		{
			return false;
		} 
		
		return true;
	}
	
	/**
	 * Descriptor for {@link CastAIPBuilder}. Used as a singleton. The class is
	 * marked as public so that it can be accessed from views.
	 *
	 * <p>
	 * See
	 * <tt>src/main/resources/hudson/plugins/hello_world/CastDMTBuilder/*.jelly</tt>
	 * for the actual HTML fragment for the configuration screen.
	 */
//	@Extension
//	// This indicates to Jenkins that this is an implementation of an extension
//	// point.
//	public static final class DescriptorImpl extends BuildStepDescriptor<Builder>
//	{
//
//		private boolean useDMT;
//
//		public DescriptorImpl()
//		{
//			load();
//		}
//
//		@SuppressWarnings("rawtypes")
//		public boolean isApplicable(Class<? extends AbstractProject> aClass)
//		{
//			// Indicates that this builder can be used with all kinds of project
//			// types
//			return true;
//		}
//
//		/**
//		 * This human readable name is used in the configuration screen.
//		 */
//		public String getDisplayName()
//		{
//			return "";
////			return String.format("CAST AIP %d: Deliver Application", Constants.RunDMT)  ;
//		}
//
//		@Override
//		public boolean configure(StaplerRequest req, JSONObject formData) throws FormException
//		{
//			useDMT = formData.getBoolean("useDMT");
//			save();
//			return super.configure(req, formData);
//		}
//
//		public boolean getUseDMT()
//		{
//			return useDMT;
//		}
//	}
}
