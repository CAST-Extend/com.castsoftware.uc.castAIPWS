package com.castsoftware.jenkins.CastAIPWS;
import hudson.EnvVars;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.model.AbstractBuild;
import hudson.tasks.Builder;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;

import javax.xml.rpc.ServiceException;

import org.kohsuke.stapler.DataBoundConstructor;

import com.castsoftware.batch.CastWebService;
import com.castsoftware.batch.CastWebServiceServiceLocator;
import com.castsoftware.jenkins.CastAIPWS.util.Constants;
import com.castsoftware.jenkins.CastAIPWS.util.Utils;
import com.castsoftware.restapi.JsonResponse;
import com.castsoftware.util.CastUtil;
import com.google.gson.Gson;

public class CastAIPAnalyzeBuilder extends Builder 
{
    // Fields in config.jelly must match the parameter names in the "DataBoundConstructor"
    @DataBoundConstructor
    public CastAIPAnalyzeBuilder() 
    {
    }
     
    @SuppressWarnings("rawtypes")
	@Override
    public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException 
    {
    	int taskId;
    	long startTime = System.nanoTime() ; 

		EnvVars envVars = build.getEnvironment(listener);
		int startAt;
		try {
			startAt = Integer.parseInt(envVars.get(Constants.START_AT));
		} catch (NumberFormatException e) {
			startAt=0;
		}
    	if (startAt > Constants.RunAnalysis) {
			listener.getLogger().println(" ");
			listener.getLogger().println(
					String.format("${START_AT} = %d, skipping run analysis step.", startAt));
		} else {
	   		listener.getLogger().println("");
	    	listener.getLogger().println("Run Analysis");
	
	    	boolean failBuild = false;
			try {
		    	String webServiceAddress = envVars.get(Constants.CMS_WEB_SERVICE_ADDRESS);
		    	String castDate = envVars.get(Constants.CAST_DATE);
		    	String appName = envVars.get(Constants.APPLICATION_NAME);
		    	String dbPrefix = envVars.get(Constants.SCHEMA_PREFIX);
		    	String versionName = envVars.get(Constants.VERSION_NAME);
		    	String castMSConnectionProfile = envVars.get(Constants.CONNECTION_PROFILE);
		    	String workFlow = envVars.get(Constants.WORK_FLOW);
		    	failBuild = workFlow.trim().toLowerCase().equals("no");
	
		        CastWebServiceServiceLocator cbwsl = new CastWebServiceServiceLocator();
				cbwsl.setCastWebServicePortEndpointAddress(webServiceAddress);
				CastWebService cbws = cbwsl.getCastWebServicePort();
		    	
				Calendar cal = Utils.convertCastDate(castDate);
				
	        	startTime = System.nanoTime(); 
	        	taskId = cbws.runAnalysis(appName, versionName,  castMSConnectionProfile, cal);
	        	if (taskId < 0)
	        	{
	        		// begin code added by SAM 
	        		listener.getLogger().println(" ");
	        		listener.getLogger().println("Sending analyisis logs to Application Operations Portal");
	        		
	        		String mngtDB = String.format("%s_mngt", dbPrefix);
	        		String rslt = cbws.sendAnalysisLogs(mngtDB,appName, castDate);
	        		JsonResponse response = new Gson().fromJson(rslt, JsonResponse.class);
	        		if (response.getCode() < 0)
	        		{
		        		listener.getLogger().println("Error sending analyisis logs to Application Operations Portal");
	        		}
	        		listener.getLogger().println(response.getJsonString());
	        		// end code added by SAM 	        		
	        		listener.getLogger().println(String.format("Error: %s",cbws.getErrorMessage(-taskId)));
	            	return false || failBuild;
	        	}
	        	else 
	        	{
	        		boolean runStatus = Utils.getLog(cbws,taskId,startTime,listener);
		        	
	        		listener.getLogger().println(" ");
	        		listener.getLogger().println("Sending analyisis logs to Application Operations Portal");
	        		
	        		String mngtDB = String.format("%s_mngt", dbPrefix);
	        		String rslt = cbws.sendAnalysisLogs(mngtDB,appName, castDate);
	        		JsonResponse response = new Gson().fromJson(rslt, JsonResponse.class);
	        		if (response.getCode() < 0)
	        		{
		        		listener.getLogger().println("Error sending analyisis logs to Application Operations Portal");
	        		}
	        		listener.getLogger().println(response.getJsonString());
	        		
	        		return runStatus;
	        	}
	
			} catch (IOException | ServiceException | ParseException e) {
				listener.getLogger().println(
						String.format("Interrupted after: %s\n%s: %s", 
								CastUtil.formatNanoTime(System.nanoTime() - startTime),
								e.getClass().getName(),  
								e.getMessage()));
				return false || failBuild;
			}
		}  
		//are there any remaining steps to run, if so run them now
		if (!Utils.runJobs(build, launcher, listener, this.getClass(), Constants.RunAnalysis))
		{
			return false;
		}
    	return true;
    }
    
}

